library(Biobase)
library(GEOquery)
library(limma)
library(gplots)
library(RColorBrewer)


gset <- getGEO("${SERIES_ACCESSION}", GSEMatrix =TRUE)

if (length(gset) > 1) idx <- grep(${PLATFORM}, attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]

fvarLabels(gset) <- make.names(fvarLabels(gset))

# group names for all samples
groupZeroSamples <- c(${GROUP_ZERO});
groupContrastSamples <- c(${GROUP_CONTRAST});

# eliminate samples marked as "X"
groupZeroIndices <- which(sampleNames(gset) %in% groupZeroSamples)
groupZeroLabels = rep(c("G0"), length(groupZeroIndices))
groupContrastIndices <- which(sampleNames(gset) %in% groupContrastSamples)
groupContrastLabels = rep(c("G1"), length(groupContrastIndices))

groupsOfInterestIndices = c(groupZeroIndices, groupContrastIndices)

sml <- c(groupZeroLabels, groupContrastLabels)
gset <- gset[ ,groupsOfInterestIndices]
count <- dim(gset)
numgenes <- count[1]

# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
  (qx[6]-qx[1] > 50 && qx[2] > 0) ||
  (qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
            exprs(gset) <- log2(ex) }

# set up the data and proceed with analysis
fl <- as.factor(sml)
gset$$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="BH", sort.by="M", number=numgenes)

# load NCBI platform annotation
gpl <- annotation(gset)
platf <- getGEO(gpl, AnnotGPL=TRUE)
ncbifd <- data.frame(attr(dataTable(platf), "table"))

# replace original platform annotation
tT <- tT[setdiff(colnames(tT), setdiff(fvarLabels(gset), "ID"))]
tT <- merge(tT, ncbifd, by="ID")
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
tT <- tT[order(tT$$P.Value), ]  # restore correct order
write.csv(tT,"/tmp/${DENAME}.csv")

# find DE genes
degenes <- subset(tT, tT$$adj.P.Val<0.15)
up <- subset(degenes, degenes$$logFC>0.0)
down <- subset(degenes, degenes$$logFC< -0.0)

# Combine up/down reg genes into single csv
degenescsv <- rbind(up, down)
degenes <- degenescsv[order(degenescsv$$P.Value), ]
write.csv(degenes, "/tmp/${DENAME}_de.csv", row.names=TRUE)

# Volcano Plot
png(file = "/tmp/${DENAME}_volcano.png", 490, 350)
par(mar=c(3,3,2,1), mgp=c(2,.7,0), tck=-.01)
volcano <- plot(degenes$$logFC, -log10(degenes$$P.Value),
                xlim=c(-5, 5), ylim=c(0, 10), #Set limits
                xlab="log2 fold change", ylab="-log10 p-value")
dev.off()


#Heat Mapping
allprobes <- read.csv(file = "/tmp/${DENAME}.csv", header=TRUE)
deprobes <- read.csv(file = "/tmp/${DENAME}_de.csv", header=TRUE)[ ,2]
de <- data.frame(deprobes)

select <- allprobes$$X %in% de$$deprobes
plotDE <- allprobes[select,]

rnames <- plotDE[,1]
columnnum <- ncol(plotDE)
mat_data <- data.matrix(plotDE[,2:columnnum])
rownames(mat_data) <- rnames

png(file = "/tmp/${DENAME}_heatmap.png")
palette <- colorRampPalette(c("red", "green"))(n = 299)
heatmap(mat_data, col=palette)
dev.off()



